// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/jordanlanch/bia-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MeterUsecase is an autogenerated mock type for the MeterUsecase type
type MeterUsecase struct {
	mock.Mock
}

// GetManyMeters provides a mock function with given fields: pagination
func (_m *MeterUsecase) GetManyMeters(pagination *domain.Pagination) ([]*domain.Meter, error) {
	ret := _m.Called(pagination)

	var r0 []*domain.Meter
	if rf, ok := ret.Get(0).(func(*domain.Pagination) []*domain.Meter); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Meter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Pagination) error); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeterById provides a mock function with given fields: id
func (_m *MeterUsecase) GetMeterById(id uuid.UUID) (*domain.Meter, error) {
	ret := _m.Called(id)

	var r0 *domain.Meter
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.Meter); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Meter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMeterUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMeterUsecase creates a new instance of MeterUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMeterUsecase(t mockConstructorTestingTNewMeterUsecase) *MeterUsecase {
	mock := &MeterUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
