// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jordanlanch/bia-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ConsumptionRepository is an autogenerated mock type for the ConsumptionRepository type
type ConsumptionRepository struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: c, id
func (_m *ConsumptionRepository) FindByID(c context.Context, id uuid.UUID) (*domain.Consumption, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Consumption
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Consumption); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Consumption)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPeriod provides a mock function with given fields: c, period_type, start, end, meterIDs, pagination
func (_m *ConsumptionRepository) FindByPeriod(c context.Context, period_type string, start string, end string, meterIDs []int, pagination *domain.Pagination) (*domain.Response, error) {
	ret := _m.Called(c, period_type, start, end, meterIDs, pagination)

	var r0 *domain.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []int, *domain.Pagination) *domain.Response); ok {
		r0 = rf(c, period_type, start, end, meterIDs, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []int, *domain.Pagination) error); ok {
		r1 = rf(c, period_type, start, end, meterIDs, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, consumption
func (_m *ConsumptionRepository) Save(ctx context.Context, consumption *domain.Consumption) error {
	ret := _m.Called(ctx, consumption)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Consumption) error); ok {
		r0 = rf(ctx, consumption)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConsumptionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumptionRepository creates a new instance of ConsumptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumptionRepository(t mockConstructorTestingTNewConsumptionRepository) *ConsumptionRepository {
	mock := &ConsumptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
